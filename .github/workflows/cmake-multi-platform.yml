name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.release_tag.outputs.release_tag }}  # Expose release tag as output

    steps:
    - uses: actions/checkout@v4

    - name: Set Release Tag to Current Date and Time
      id: release_tag
      run: |
        RELEASE_TAG="v$(date +'%Y%m%d%H%M%S')"  # Create a version tag based on the current date and time
        echo "Release tag: $RELEASE_TAG"
        echo "::set-output name=release_tag::$RELEASE_TAG"  # Set the release tag as an output variable

    - name: Create Release
      id: create_release
      run: |
        RELEASE_TAG="${{ steps.release_tag.outputs.release_tag }}"  # Fetch release tag from earlier step
        echo "Creating release with tag $RELEASE_TAG"
        gh release create $RELEASE_TAG --title "Release $RELEASE_TAG" --notes "Release created on $RELEASE_TAG"  # Create the release with the tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_upload:
    needs: create_release  # Ensure this job runs after `create_release`
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] #, windows-latest]
        build_type: [Release]
        include:
          # For Linux, use gcc or clang as compilers
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++

          # For Windows, use MSVC as the compiler
          # - os: windows-latest
          #   c_compiler: msvc
          #   cpp_compiler: msvc

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies (Including gh)
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            libluajit-5.1-dev \
            protobuf-c-compiler \
            libprotobuf-c-dev \
            libopus-dev \
            libsndfile1-dev \
            libuv1-dev \
            gh  # Install GitHub CLI
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "Windows dependencies installed via vcpkg"
        fi
      shell: bash

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install vcpkg for MSVC (Windows only)
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v11
      with:
        runVcpkgInstall: true 
        doNotUpdateVcpkg: true
        vcpkgJsonGlob: "**/vcpkg.json"
      env:
        VCPKG_DEFAULT_TRIPLET: "x64-windows"  # Set the default triplet for MSVC

    - name: Configure CMake
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          # CMake configuration for Windows (MSVC)
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -G "Visual Studio 16 2019"  # Specify Visual Studio generator for MSVC
        else
          # CMake configuration for Linux
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -S ${{ github.workspace }}
        fi
      shell: bash

    - name: Build
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Zip GCC .so Files
      if: matrix.c_compiler == 'gcc'
      run: |
        GCC_SO_FILES=$(find ${{ steps.strings.outputs.build-output-dir }} -name '*.so' -type f)
        echo "Found GCC .so files: $GCC_SO_FILES"
        ZIP_FILE="release-gcc.zip"
        zip -r $ZIP_FILE $GCC_SO_FILES  # Zip all GCC .so files
        echo "Zipped GCC .so files into $ZIP_FILE"
      working-directory: ${{ github.workspace }}

    - name: Zip Clang .so Files
      if: matrix.c_compiler == 'clang'
      run: |
        CLANG_SO_FILES=$(find ${{ steps.strings.outputs.build-output-dir }} -name '*.so' -type f)
        echo "Found Clang .so files: $CLANG_SO_FILES"
        ZIP_FILE="release-clang.zip"
        zip -r $ZIP_FILE $CLANG_SO_FILES  # Zip all Clang .so files
        echo "Zipped Clang .so files into $ZIP_FILE"
      working-directory: ${{ github.workspace }}

    - name: Zip MSVC Files
      if: matrix.c_compiler == 'msvc'
      run: |
        echo "Zipping MSVC files..."
        MSVC_DLL_FILES=$(find ${{ steps.strings.outputs.build-output-dir }} -name '*.dll' -type f)
        echo "Found MSVC .dll files: $MSVC_DLL_FILES"
        ZIP_FILE="release-msvc.zip"
        Compress-Archive -Path $MSVC_DLL_FILES -DestinationPath $ZIP_FILE # Zip all MSVC .dll files
        echo "Zipped MSVC .dll files into $ZIP_FILE"
      shell: powershell

    - name: Upload GCC .so Zip to Release
      if: matrix.c_compiler == 'gcc'
      run: |
        RELEASE_TAG="${{ needs.create_release.outputs.release_tag }}"
        ZIP_FILE="release-gcc.zip"
        if [ -f "$ZIP_FILE" ]; then  # Check if the zip file was created
          echo "Uploading $ZIP_FILE to release $RELEASE_TAG"
          gh release upload $RELEASE_TAG $ZIP_FILE --clobber  # Upload the zip file to the single release
        else
          echo "Error: $ZIP_FILE does not exist."
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Clang .so Zip to Release
      if: matrix.c_compiler == 'clang'
      run: |
        RELEASE_TAG="${{ needs.create_release.outputs.release_tag }}"
        ZIP_FILE="release-clang.zip"
        if [ -f "$ZIP_FILE" ]; then  # Check if the zip file was created
          echo "Uploading $ZIP_FILE to release $RELEASE_TAG"
          gh release upload $RELEASE_TAG $ZIP_FILE --clobber  # Upload the zip file to the single release
        else
          echo "Error: $ZIP_FILE does not exist."
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload MSVC .dll Zip to Release
      if: matrix.c_compiler == 'msvc'
      run: |
        echo "Uploading MSVC zip..."
        RELEASE_TAG="${{ needs.create_release.outputs.release_tag }}"
        ZIP_FILE="release-msvc.zip"
        if [ -f "$ZIP_FILE" ]; then  # Check if the zip file was created
          echo "Uploading $ZIP_FILE to release $RELEASE_TAG"
          gh release upload $RELEASE_TAG $ZIP_FILE --clobber
        else
          echo "Error: $ZIP_FILE not found."
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
